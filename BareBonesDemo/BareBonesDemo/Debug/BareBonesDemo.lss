
BareBonesDemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000288  00800100  00000adc  00000b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018d  00800388  00800388  00000df8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001498  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067b  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000558  00000000  00000000  00002a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000344  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e2  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fb5  00000000  00000000  000037a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00004757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 38       	cpi	r26, 0x88	; 136
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a8 e8       	ldi	r26, 0x88	; 136
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <serialMoteSend>:
void serialMoteSend(int8_t data )
{
	/*
	Wait for empty transmit buffer
	*/
	while( !( UCSR0A & (1<<UDRE0)) );
  a6:	90 91 c0 00 	lds	r25, 0x00C0
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <serialMoteSend>
	/*
	Put data into buffer, sends the data
	*/
	UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24
  b2:	08 95       	ret

000000b4 <serialMoteReceive>:
}


int8_t serialMoteReceive(void)
{	//Only read UDR0
	return UDR0;
  b4:	80 91 c6 00 	lds	r24, 0x00C6
}
  b8:	08 95       	ret

000000ba <__vector_18>:

#define PAQUETES 100   // Number of packets to send for the test

MoteData_t moteData;  //structure for keeping mote data 

ISR(USART_RX_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	
	InterruptReception(&moteData);
  dc:	88 e8       	ldi	r24, 0x88	; 136
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <InterruptReception>
			
}
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	bf 91       	pop	r27
  ea:	af 91       	pop	r26
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	7f 91       	pop	r23
  f2:	6f 91       	pop	r22
  f4:	5f 91       	pop	r21
  f6:	4f 91       	pop	r20
  f8:	3f 91       	pop	r19
  fa:	2f 91       	pop	r18
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <initSerialMote>:
}



void initSerialMote(void){
	UBRR0 = UBRRMOTE;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 c5 00 	sts	0x00C5, r25
 10e:	80 93 c4 00 	sts	0x00C4, r24
	//UCSR0A = (1<<U2X0);
	UCSR0B = (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0);                // enable receiver and transmitter
 112:	88 e9       	ldi	r24, 0x98	; 152
 114:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);   // 8bit data format
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	80 93 c2 00 	sts	0x00C2, r24
 11e:	08 95       	ret

00000120 <main>:
			
}


int main(void)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <main+0x6>
 126:	00 d0       	rcall	.+0      	; 0x128 <main+0x8>
 128:	00 d0       	rcall	.+0      	; 0x12a <main+0xa>
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	
	//set the function pointers for send and receive
	moteData.serialMoteSend=serialMoteSend;
 12e:	83 e5       	ldi	r24, 0x53	; 83
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 89 03 	sts	0x0389, r25
 136:	80 93 88 03 	sts	0x0388, r24
	moteData.serialMoteReceive=serialMoteReceive;
 13a:	8a e5       	ldi	r24, 0x5A	; 90
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 8b 03 	sts	0x038B, r25
 142:	80 93 8a 03 	sts	0x038A, r24


	DDRC = (1<<PORTC0)|(1<<PORTC1); // select pc0 and pc1 as outputs
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	87 b9       	out	0x07, r24	; 7
	//pc0 drives the reset on the whmt, pc1 is the led indication
	
	PORTC = (1<<PORTC2);//Pull up on the button, reset the mote
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	88 b9       	out	0x08, r24	; 8


	initSerialMote(); //Initialize the serial connection for the mote
 14e:	0e 94 83 00 	call	0x106	; 0x106 <initSerialMote>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	8f eb       	ldi	r24, 0xBF	; 191
 156:	96 e0       	ldi	r25, 0x06	; 6
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x42>
 162:	00 00       	nop
	
	
	_delay_ms(300);
	sei();
 164:	78 94       	sei
	PORTC |= (1<<PORTC0);// turn on the mote
 166:	40 9a       	sbi	0x08, 0	; 8
	
	MoteInitialization(&moteData);
 168:	88 e8       	ldi	r24, 0x88	; 136
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	0e 94 b4 01 	call	0x368	; 0x368 <MoteInitialization>

	MoteSvcInitialization(&moteData);
 170:	88 e8       	ldi	r24, 0x88	; 136
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	0e 94 44 01 	call	0x288	; 0x288 <MoteSvcInitialization>
	
	uint8_t datos[]={0xB1,0x6B,0x00,0xB5};
	uint8_t datos2[]={'D','I','N','E','R','O'};
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	e6 e0       	ldi	r30, 0x06	; 6
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	de 01       	movw	r26, r28
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	01 90       	ld	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	8a 95       	dec	r24
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x62>
		
	//bit_fld & (1<<n)
	
	PORTC |= (1<<PORTC1); //turn on LED, the Mote is ready to send
 18a:	41 9a       	sbi	0x08, 1	; 8
	
	
	while (PINC & (1<<PINC2)); // wait for button press
 18c:	32 99       	sbic	0x06, 2	; 6
 18e:	fe cf       	rjmp	.-4      	; 0x18c <main+0x6c>
	PORTC &= ~(1<<PORTC1);// turn off the LED
 190:	41 98       	cbi	0x08, 1	; 8
 192:	05 e6       	ldi	r16, 0x65	; 101
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	8f e3       	ldi	r24, 0x3F	; 63
 19a:	9b e0       	ldi	r25, 0x0B	; 11
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x7c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x86>
 1a6:	00 00       	nop
    while(packets<=PAQUETES)
    {
		_delay_ms(500);
		//begin transmission 
		//send data every 500ms, serviceID is defined in BareBonesWHT.h
		sendData(datos2,sizeof(datos2),serviceID,&moteData);
 1a8:	28 e8       	ldi	r18, 0x88	; 136
 1aa:	33 e0       	ldi	r19, 0x03	; 3
 1ac:	42 e0       	ldi	r20, 0x02	; 2
 1ae:	66 e0       	ldi	r22, 0x06	; 6
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <sendData>
 1b8:	01 50       	subi	r16, 0x01	; 1
 1ba:	11 09       	sbc	r17, r1
	
	while (PINC & (1<<PINC2)); // wait for button press
	PORTC &= ~(1<<PORTC1);// turn off the LED
	
	uint16_t packets = 0;
    while(packets<=PAQUETES)
 1bc:	01 15       	cp	r16, r1
 1be:	11 05       	cpc	r17, r1
 1c0:	51 f7       	brne	.-44     	; 0x196 <main+0x76>
		packets++;
		
    }
	
	
	PORTC |= (1<<PORTC1);// turn on LED again, tx finished
 1c2:	41 9a       	sbi	0x08, 1	; 8
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <main+0xa4>

000001c6 <InterruptReception>:


//


void InterruptReception (MoteData_p moteData) {
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	ec 01       	movw	r28, r24
//Place this function inside your Serial Receipt Interrupt
//Dont read the byte, the function serialMoteReceive will do it

moteData->RXbuffer[moteData->RXindex]=moteData->serialMoteReceive();
 1d0:	0c 81       	ldd	r16, Y+4	; 0x04
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	ea 81       	ldd	r30, Y+2	; 0x02
 1d6:	fb 81       	ldd	r31, Y+3	; 0x03
 1d8:	09 95       	icall
 1da:	fe 01       	movw	r30, r28
 1dc:	e0 0f       	add	r30, r16
 1de:	f1 1f       	adc	r31, r17
 1e0:	85 83       	std	Z+5, r24	; 0x05
	moteData->RXindex++;
 1e2:	8c 81       	ldd	r24, Y+4	; 0x04
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	8c 83       	std	Y+4, r24	; 0x04
	//sei();
	
	//serialPCtx(moteData->RXbuffer[moteData->RXindex-1]);
	
	
	if ((moteData->RXbuffer[moteData->RXindex-1] == 0x7E) && ((moteData->RXindex-1) > 0) )
 1e8:	ec 81       	ldd	r30, Y+4	; 0x04
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	31 97       	sbiw	r30, 0x01	; 1
 1ee:	ec 0f       	add	r30, r28
 1f0:	fd 1f       	adc	r31, r29
 1f2:	85 81       	ldd	r24, Z+5	; 0x05
 1f4:	8e 37       	cpi	r24, 0x7E	; 126
 1f6:	f9 f4       	brne	.+62     	; 0x236 <InterruptReception+0x70>
 1f8:	8c 81       	ldd	r24, Y+4	; 0x04
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 97       	sbiw	r24, 0x02	; 2
 1fe:	dc f0       	brlt	.+54     	; 0x236 <InterruptReception+0x70>
	{
		//serialPCtxArray(moteData->RXbuffer,moteData->RXindex);
	
		//moteData->RXindex++;
		//serialPCtxArray(moteData->RXbuffer,moteData->RXindex);
	 moteData->decodeResult = hdlc_decode(moteData->hdlcDecoded, moteData->RXbuffer,&moteData->RXindex, sizeof(moteData->hdlcDecoded));
 200:	20 e8       	ldi	r18, 0x80	; 128
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	ae 01       	movw	r20, r28
 206:	4c 5f       	subi	r20, 0xFC	; 252
 208:	5f 4f       	sbci	r21, 0xFF	; 255
 20a:	be 01       	movw	r22, r28
 20c:	6b 5f       	subi	r22, 0xFB	; 251
 20e:	7f 4f       	sbci	r23, 0xFF	; 255
 210:	ce 01       	movw	r24, r28
 212:	88 5f       	subi	r24, 0xF8	; 248
 214:	9e 4f       	sbci	r25, 0xFE	; 254
 216:	0e 94 78 03 	call	0x6f0	; 0x6f0 <hdlc_decode>
 21a:	fe 01       	movw	r30, r28
 21c:	eb 57       	subi	r30, 0x7B	; 123
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	91 83       	std	Z+1, r25	; 0x01
 222:	80 83       	st	Z, r24
		if (moteData->decodeResult>0)
 224:	80 81       	ld	r24, Z
 226:	91 81       	ldd	r25, Z+1	; 0x01
 228:	18 16       	cp	r1, r24
 22a:	19 06       	cpc	r1, r25
 22c:	1c f4       	brge	.+6      	; 0x234 <InterruptReception+0x6e>
		{
			moteData->validFrame=1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	32 96       	adiw	r30, 0x02	; 2
 232:	80 83       	st	Z, r24
			//serialPCtxArray(moteData->hdlcDecoded,moteData->decodeResult);
		}
		moteData->RXindex=0;
 234:	1c 82       	std	Y+4, r1	; 0x04
		return;
	}else{return;}//moteData->RXindex++;}


}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <serialMoteSendArray>:
	}
}



void serialMoteSendArray(uint8_t* datos, uint8_t tam, MoteData_p moteData){
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	1f 92       	push	r1
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	8a 01       	movw	r16, r20
 256:	f8 2e       	mov	r15, r24
	//send many bytes
	for (uint8_t i=0;i<tam;i++)
 258:	6c 01       	movw	r12, r24
 25a:	8c 2d       	mov	r24, r12
 25c:	8f 19       	sub	r24, r15
 25e:	86 17       	cp	r24, r22
 260:	50 f4       	brcc	.+20     	; 0x276 <serialMoteSendArray+0x36>
	{
		//serialMoteSend(datos[i]);
		moteData->serialMoteSend(datos[i]);
 262:	d8 01       	movw	r26, r16
 264:	ed 91       	ld	r30, X+
 266:	fc 91       	ld	r31, X
 268:	d6 01       	movw	r26, r12
 26a:	8d 91       	ld	r24, X+
 26c:	6d 01       	movw	r12, r26
 26e:	69 83       	std	Y+1, r22	; 0x01
 270:	09 95       	icall
 272:	69 81       	ldd	r22, Y+1	; 0x01
 274:	f2 cf       	rjmp	.-28     	; 0x25a <serialMoteSendArray+0x1a>
	}
	
}
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	08 95       	ret

00000288 <MoteSvcInitialization>:
	}


}

void MoteSvcInitialization( MoteData_p moteData){
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24

// requesting service
	
	moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,setService,sizeof(setService),sizeof(moteData->hdlcOutput));
 29e:	8c 01       	movw	r16, r24
 2a0:	08 57       	subi	r16, 0x78	; 120
 2a2:	1f 4f       	sbci	r17, 0xFF	; 255
 2a4:	20 e8       	ldi	r18, 0x80	; 128
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	4d e0       	ldi	r20, 0x0D	; 13
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	60 e2       	ldi	r22, 0x20	; 32
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 2b0:	c8 01       	movw	r24, r16
 2b2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 2b6:	6e 01       	movw	r12, r28
 2b8:	98 e7       	ldi	r25, 0x78	; 120
 2ba:	c9 1a       	sub	r12, r25
 2bc:	9e ef       	ldi	r25, 0xFE	; 254
 2be:	d9 0a       	sbc	r13, r25
 2c0:	f6 01       	movw	r30, r12
 2c2:	80 83       	st	Z, r24
	serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 2c4:	ae 01       	movw	r20, r28
 2c6:	68 2f       	mov	r22, r24
 2c8:	c8 01       	movw	r24, r16
 2ca:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
	
	while (!moteData->validFrame);
 2ce:	7e 01       	movw	r14, r28
 2d0:	f7 e8       	ldi	r31, 0x87	; 135
 2d2:	ef 0e       	add	r14, r31
 2d4:	f1 1c       	adc	r15, r1
 2d6:	f7 01       	movw	r30, r14
 2d8:	80 81       	ld	r24, Z
 2da:	88 23       	and	r24, r24
 2dc:	e1 f3       	breq	.-8      	; 0x2d6 <MoteSvcInitialization+0x4e>
	moteData->validFrame=0;
 2de:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,setServiceACK,moteData->decodeResult))
 2e0:	fe 01       	movw	r30, r28
 2e2:	eb 57       	subi	r30, 0x7B	; 123
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	80 81       	ld	r24, Z
 2e8:	91 81       	ldd	r25, Z+1	; 0x01
		//en este punto esperamos un svcIndication con el tiempo pedido, puede llegar uno de delayed response
		//asi que todos los respondes con el serviceACK y checamos si se nos otorgo el tiempo
			moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,serviceACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
			serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
			
		if (moteData->hdlcDecoded[3]==0x03)//delayed response
 2ea:	5e 01       	movw	r10, r28
 2ec:	f5 ef       	ldi	r31, 0xF5	; 245
 2ee:	af 1a       	sub	r10, r31
 2f0:	fe ef       	ldi	r31, 0xFE	; 254
 2f2:	bf 0a       	sbc	r11, r31
	}
	
	uint8_t serviceReady=0;
	while (!serviceReady)
	{
		while (!moteData->validFrame);
 2f4:	f7 01       	movw	r30, r14
 2f6:	80 81       	ld	r24, Z
 2f8:	88 23       	and	r24, r24
 2fa:	e1 f3       	breq	.-8      	; 0x2f4 <MoteSvcInitialization+0x6c>
		moteData->validFrame=0;
 2fc:	10 82       	st	Z, r1
		//en este punto esperamos un svcIndication con el tiempo pedido, puede llegar uno de delayed response
		//asi que todos los respondes con el serviceACK y checamos si se nos otorgo el tiempo
			moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,serviceACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
 2fe:	20 e8       	ldi	r18, 0x80	; 128
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	44 e0       	ldi	r20, 0x04	; 4
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	6d e2       	ldi	r22, 0x2D	; 45
 308:	71 e0       	ldi	r23, 0x01	; 1
 30a:	c8 01       	movw	r24, r16
 30c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 310:	f6 01       	movw	r30, r12
 312:	80 83       	st	Z, r24
			serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 314:	ae 01       	movw	r20, r28
 316:	68 2f       	mov	r22, r24
 318:	c8 01       	movw	r24, r16
 31a:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
			
		if (moteData->hdlcDecoded[3]==0x03)//delayed response
 31e:	f5 01       	movw	r30, r10
 320:	80 81       	ld	r24, Z
 322:	83 30       	cpi	r24, 0x03	; 3
 324:	39 f3       	breq	.-50     	; 0x2f4 <MoteSvcInitialization+0x6c>
		{
			serviceReady=0;
		}
		else{
			if (moteData->hdlcDecoded[3]==0x00)//created
 326:	80 81       	ld	r24, Z
	{
		//serialPCtx(0xFF); // RC = NOT OK
	}
	
	uint8_t serviceReady=0;
	while (!serviceReady)
 328:	81 11       	cpse	r24, r1
 32a:	e4 cf       	rjmp	.-56     	; 0x2f4 <MoteSvcInitialization+0x6c>
				serviceReady=1;
				//serialPCtx(0xF0);
			}
		}
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	08 95       	ret

00000342 <compareBuffer>:
	
	
	
}

uint8_t compareBuffer(uint8_t* datos, uint8_t*datos2,uint8_t tam){
 342:	28 2f       	mov	r18, r24
 344:	db 01       	movw	r26, r22
	uint8_t comparacion=0;
	for (uint8_t i=0;i<tam;i++)
 346:	fc 01       	movw	r30, r24
	
	
}

uint8_t compareBuffer(uint8_t* datos, uint8_t*datos2,uint8_t tam){
	uint8_t comparacion=0;
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	8e 2f       	mov	r24, r30
 34c:	82 1b       	sub	r24, r18
	for (uint8_t i=0;i<tam;i++)
 34e:	84 17       	cp	r24, r20
 350:	30 f4       	brcc	.+12     	; 0x35e <compareBuffer+0x1c>
	{
		//if (datos[i]==datos2[i])
		if (datos[i]==datos2[i])
 352:	31 91       	ld	r19, Z+
 354:	8d 91       	ld	r24, X+
 356:	38 13       	cpse	r19, r24
 358:	f8 cf       	rjmp	.-16     	; 0x34a <compareBuffer+0x8>
		{
			comparacion++;
 35a:	9f 5f       	subi	r25, 0xFF	; 255
 35c:	f6 cf       	rjmp	.-20     	; 0x34a <compareBuffer+0x8>
		}
	}
	
	if (comparacion>=tam)
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	94 17       	cp	r25, r20
 362:	08 f4       	brcc	.+2      	; 0x366 <compareBuffer+0x24>
 364:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	}else return 0;
	
	
	
}
 366:	08 95       	ret

00000368 <MoteInitialization>:
	}else{return;}//moteData->RXindex++;}


}

void MoteInitialization( MoteData_p moteData){
 368:	8f 92       	push	r8
 36a:	9f 92       	push	r9
 36c:	af 92       	push	r10
 36e:	bf 92       	push	r11
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	8c 01       	movw	r16, r24

while (!moteData->validFrame);
 382:	7c 01       	movw	r14, r24
 384:	27 e8       	ldi	r18, 0x87	; 135
 386:	e2 0e       	add	r14, r18
 388:	f1 1c       	adc	r15, r1
 38a:	f7 01       	movw	r30, r14
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	e1 f3       	breq	.-8      	; 0x38a <MoteInitialization+0x22>
	moteData->validFrame=0;
 392:	10 82       	st	Z, r1
	moteData->hdlcDecoded[2]=0x08;
 394:	88 e0       	ldi	r24, 0x08	; 8
 396:	f8 01       	movw	r30, r16
 398:	e6 5f       	subi	r30, 0xF6	; 246
 39a:	fe 4f       	sbci	r31, 0xFE	; 254
 39c:	80 83       	st	Z, r24
	if (compareBuffer(moteData->hdlcDecoded,bootEvent,moteData->decodeResult))
 39e:	48 01       	movw	r8, r16
 3a0:	f5 e8       	ldi	r31, 0x85	; 133
 3a2:	8f 0e       	add	r8, r31
 3a4:	91 1c       	adc	r9, r1
 3a6:	f4 01       	movw	r30, r8
 3a8:	40 81       	ld	r20, Z
 3aa:	51 81       	ldd	r21, Z+1	; 0x01
 3ac:	58 01       	movw	r10, r16
 3ae:	f8 ef       	ldi	r31, 0xF8	; 248
 3b0:	af 1a       	sub	r10, r31
 3b2:	fe ef       	ldi	r31, 0xFE	; 254
 3b4:	bf 0a       	sbc	r11, r31
 3b6:	6b e7       	ldi	r22, 0x7B	; 123
 3b8:	71 e0       	ldi	r23, 0x01	; 1
 3ba:	c5 01       	movw	r24, r10
 3bc:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 3c0:	e8 01       	movw	r28, r16
 3c2:	c8 57       	subi	r28, 0x78	; 120
 3c4:	df 4f       	sbci	r29, 0xFF	; 255
 3c6:	98 01       	movw	r18, r16
 3c8:	28 57       	subi	r18, 0x78	; 120
 3ca:	3e 4f       	sbci	r19, 0xFE	; 254
 3cc:	69 01       	movw	r12, r18
 3ce:	88 23       	and	r24, r24
 3d0:	81 f0       	breq	.+32     	; 0x3f2 <MoteInitialization+0x8a>
	{
		//serialPCtx(0x00);
		
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,eventACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
 3d2:	20 e8       	ldi	r18, 0x80	; 128
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	44 e0       	ldi	r20, 0x04	; 4
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	67 e7       	ldi	r22, 0x77	; 119
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 3e4:	f6 01       	movw	r30, r12
 3e6:	80 83       	st	Z, r24
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 3e8:	a8 01       	movw	r20, r16
 3ea:	68 2f       	mov	r22, r24
 3ec:	ce 01       	movw	r24, r28
 3ee:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
		//serialPCtxArray(moteData->hdlcOutput,moteData->sizeToSend);
	
	}
	//_delay_ms(100);
	moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,joinCommand,sizeof(joinCommand),sizeof(moteData->hdlcOutput));
 3f2:	20 e8       	ldi	r18, 0x80	; 128
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	43 e0       	ldi	r20, 0x03	; 3
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	64 e7       	ldi	r22, 0x74	; 116
 3fc:	71 e0       	ldi	r23, 0x01	; 1
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 404:	f6 01       	movw	r30, r12
 406:	80 83       	st	Z, r24
	serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 408:	a8 01       	movw	r20, r16
 40a:	68 2f       	mov	r22, r24
 40c:	ce 01       	movw	r24, r28
 40e:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
	
	
	while (!moteData->validFrame);
 412:	f7 01       	movw	r30, r14
 414:	80 81       	ld	r24, Z
 416:	88 23       	and	r24, r24
 418:	e1 f3       	breq	.-8      	; 0x412 <MoteInitialization+0xaa>
	moteData->validFrame=0;
 41a:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,joinACK,moteData->decodeResult))
 41c:	f4 01       	movw	r30, r8
 41e:	40 81       	ld	r20, Z
 420:	51 81       	ldd	r21, Z+1	; 0x01
 422:	60 e7       	ldi	r22, 0x70	; 112
 424:	71 e0       	ldi	r23, 0x01	; 1
 426:	c5 01       	movw	r24, r10
 428:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 42c:	88 23       	and	r24, r24
 42e:	81 f0       	breq	.+32     	; 0x450 <MoteInitialization+0xe8>
	{
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,joinACK,sizeof(joinACK),sizeof(moteData->hdlcOutput));
 430:	20 e8       	ldi	r18, 0x80	; 128
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	44 e0       	ldi	r20, 0x04	; 4
 436:	50 e0       	ldi	r21, 0x00	; 0
 438:	60 e7       	ldi	r22, 0x70	; 112
 43a:	71 e0       	ldi	r23, 0x01	; 1
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 442:	f6 01       	movw	r30, r12
 444:	80 83       	st	Z, r24
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 446:	a8 01       	movw	r20, r16
 448:	68 2f       	mov	r22, r24
 44a:	ce 01       	movw	r24, r28
 44c:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
		//serialPCtx(0x01);
	}
	
	
	while (!moteData->validFrame);
 450:	f7 01       	movw	r30, r14
 452:	80 81       	ld	r24, Z
 454:	88 23       	and	r24, r24
 456:	e1 f3       	breq	.-8      	; 0x450 <MoteInitialization+0xe8>
	moteData->validFrame=0;
 458:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,moteSearchingEvent,moteData->decodeResult))
 45a:	f4 01       	movw	r30, r8
 45c:	40 81       	ld	r20, Z
 45e:	51 81       	ldd	r21, Z+1	; 0x01
 460:	64 e6       	ldi	r22, 0x64	; 100
 462:	71 e0       	ldi	r23, 0x01	; 1
 464:	c5 01       	movw	r24, r10
 466:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 46a:	88 23       	and	r24, r24
 46c:	81 f0       	breq	.+32     	; 0x48e <MoteInitialization+0x126>
	{
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,eventACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
 46e:	20 e8       	ldi	r18, 0x80	; 128
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	44 e0       	ldi	r20, 0x04	; 4
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	67 e7       	ldi	r22, 0x77	; 119
 478:	71 e0       	ldi	r23, 0x01	; 1
 47a:	ce 01       	movw	r24, r28
 47c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 480:	f6 01       	movw	r30, r12
 482:	80 83       	st	Z, r24
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 484:	a8 01       	movw	r20, r16
 486:	68 2f       	mov	r22, r24
 488:	ce 01       	movw	r24, r28
 48a:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
		//serialPCtx(0x02);
	}
	
	while (!moteData->validFrame);
 48e:	f7 01       	movw	r30, r14
 490:	80 81       	ld	r24, Z
 492:	88 23       	and	r24, r24
 494:	e1 f3       	breq	.-8      	; 0x48e <MoteInitialization+0x126>
	moteData->validFrame=0;
 496:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,negotiatingEvent,moteData->decodeResult))
 498:	f4 01       	movw	r30, r8
 49a:	40 81       	ld	r20, Z
 49c:	51 81       	ldd	r21, Z+1	; 0x01
 49e:	68 e5       	ldi	r22, 0x58	; 88
 4a0:	71 e0       	ldi	r23, 0x01	; 1
 4a2:	c5 01       	movw	r24, r10
 4a4:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 4a8:	88 23       	and	r24, r24
 4aa:	81 f0       	breq	.+32     	; 0x4cc <MoteInitialization+0x164>
	{
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,eventACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
 4ac:	20 e8       	ldi	r18, 0x80	; 128
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	44 e0       	ldi	r20, 0x04	; 4
 4b2:	50 e0       	ldi	r21, 0x00	; 0
 4b4:	67 e7       	ldi	r22, 0x77	; 119
 4b6:	71 e0       	ldi	r23, 0x01	; 1
 4b8:	ce 01       	movw	r24, r28
 4ba:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 4be:	f6 01       	movw	r30, r12
 4c0:	80 83       	st	Z, r24
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 4c2:	a8 01       	movw	r20, r16
 4c4:	68 2f       	mov	r22, r24
 4c6:	ce 01       	movw	r24, r28
 4c8:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
		//serialPCtx(0x03);
	}
	
	while (!moteData->validFrame);
 4cc:	f7 01       	movw	r30, r14
 4ce:	80 81       	ld	r24, Z
 4d0:	88 23       	and	r24, r24
 4d2:	e1 f3       	breq	.-8      	; 0x4cc <MoteInitialization+0x164>
	moteData->validFrame=0;
 4d4:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,alarmEvent,moteData->decodeResult))
 4d6:	f4 01       	movw	r30, r8
 4d8:	40 81       	ld	r20, Z
 4da:	51 81       	ldd	r21, Z+1	; 0x01
 4dc:	6c e4       	ldi	r22, 0x4C	; 76
 4de:	71 e0       	ldi	r23, 0x01	; 1
 4e0:	c5 01       	movw	r24, r10
 4e2:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 4e6:	88 23       	and	r24, r24
 4e8:	81 f0       	breq	.+32     	; 0x50a <MoteInitialization+0x1a2>
	{
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,eventACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
 4ea:	20 e8       	ldi	r18, 0x80	; 128
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	44 e0       	ldi	r20, 0x04	; 4
 4f0:	50 e0       	ldi	r21, 0x00	; 0
 4f2:	67 e7       	ldi	r22, 0x77	; 119
 4f4:	71 e0       	ldi	r23, 0x01	; 1
 4f6:	ce 01       	movw	r24, r28
 4f8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 4fc:	f6 01       	movw	r30, r12
 4fe:	80 83       	st	Z, r24
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 500:	a8 01       	movw	r20, r16
 502:	68 2f       	mov	r22, r24
 504:	ce 01       	movw	r24, r28
 506:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
		//serialPCtx(0x04);
		
	}
	
	while (!moteData->validFrame);
 50a:	f7 01       	movw	r30, r14
 50c:	80 81       	ld	r24, Z
 50e:	88 23       	and	r24, r24
 510:	e1 f3       	breq	.-8      	; 0x50a <MoteInitialization+0x1a2>
	moteData->validFrame=0;
 512:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,operationalEvent,moteData->decodeResult))
 514:	f4 01       	movw	r30, r8
 516:	40 81       	ld	r20, Z
 518:	51 81       	ldd	r21, Z+1	; 0x01
 51a:	60 e4       	ldi	r22, 0x40	; 64
 51c:	71 e0       	ldi	r23, 0x01	; 1
 51e:	c5 01       	movw	r24, r10
 520:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 524:	88 23       	and	r24, r24
 526:	81 f0       	breq	.+32     	; 0x548 <MoteInitialization+0x1e0>
	{
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,eventACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
 528:	20 e8       	ldi	r18, 0x80	; 128
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	44 e0       	ldi	r20, 0x04	; 4
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	67 e7       	ldi	r22, 0x77	; 119
 532:	71 e0       	ldi	r23, 0x01	; 1
 534:	ce 01       	movw	r24, r28
 536:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 53a:	f6 01       	movw	r30, r12
 53c:	80 83       	st	Z, r24
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 53e:	a8 01       	movw	r20, r16
 540:	68 2f       	mov	r22, r24
 542:	ce 01       	movw	r24, r28
 544:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
		//serialPCtx(0x05);
		
	}
	
	while (!moteData->validFrame);
 548:	f7 01       	movw	r30, r14
 54a:	80 81       	ld	r24, Z
 54c:	88 23       	and	r24, r24
 54e:	e1 f3       	breq	.-8      	; 0x548 <MoteInitialization+0x1e0>
	moteData->validFrame=0;
 550:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,svcIndication,moteData->decodeResult))
 552:	f4 01       	movw	r30, r8
 554:	40 81       	ld	r20, Z
 556:	51 81       	ldd	r21, Z+1	; 0x01
 558:	61 e3       	ldi	r22, 0x31	; 49
 55a:	71 e0       	ldi	r23, 0x01	; 1
 55c:	c5 01       	movw	r24, r10
 55e:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 562:	88 23       	and	r24, r24
 564:	e1 f0       	breq	.+56     	; 0x59e <MoteInitialization+0x236>
	{
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,serviceACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
 566:	20 e8       	ldi	r18, 0x80	; 128
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	44 e0       	ldi	r20, 0x04	; 4
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	6d e2       	ldi	r22, 0x2D	; 45
 570:	71 e0       	ldi	r23, 0x01	; 1
 572:	ce 01       	movw	r24, r28
 574:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 578:	f6 01       	movw	r30, r12
 57a:	80 83       	st	Z, r24
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 57c:	a8 01       	movw	r20, r16
 57e:	68 2f       	mov	r22, r24
 580:	ce 01       	movw	r24, r28
	{
		//return to state machine
	}


}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	ff 90       	pop	r15
 58c:	ef 90       	pop	r14
 58e:	df 90       	pop	r13
 590:	cf 90       	pop	r12
 592:	bf 90       	pop	r11
 594:	af 90       	pop	r10
 596:	9f 90       	pop	r9
 598:	8f 90       	pop	r8
	while (!moteData->validFrame);
	moteData->validFrame=0;
	if (compareBuffer(moteData->hdlcDecoded,svcIndication,moteData->decodeResult))
	{
		moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,serviceACK,sizeof(eventACK),sizeof(moteData->hdlcOutput));
		serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 59a:	0c 94 20 01 	jmp	0x240	; 0x240 <serialMoteSendArray>
	{
		//return to state machine
	}


}
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	df 90       	pop	r13
 5ac:	cf 90       	pop	r12
 5ae:	bf 90       	pop	r11
 5b0:	af 90       	pop	r10
 5b2:	9f 90       	pop	r9
 5b4:	8f 90       	pop	r8
 5b6:	08 95       	ret

000005b8 <sendData>:
		moteData->serialMoteSend(datos[i]);
	}
	
}

uint8_t sendData(uint8_t* data, uint8_t tam, uint8_t svcId, MoteData_p moteData){
 5b8:	6f 92       	push	r6
 5ba:	7f 92       	push	r7
 5bc:	9f 92       	push	r9
 5be:	af 92       	push	r10
 5c0:	bf 92       	push	r11
 5c2:	cf 92       	push	r12
 5c4:	df 92       	push	r13
 5c6:	ef 92       	push	r14
 5c8:	ff 92       	push	r15
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	1f 92       	push	r1
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	7c 01       	movw	r14, r24
 5da:	94 2e       	mov	r9, r20
 5dc:	89 01       	movw	r16, r18
	
	
	moteData->sizeToSend=0;
 5de:	69 01       	movw	r12, r18
 5e0:	88 e7       	ldi	r24, 0x78	; 120
 5e2:	c8 1a       	sub	r12, r24
 5e4:	8e ef       	ldi	r24, 0xFE	; 254
 5e6:	d8 0a       	sbc	r13, r24
 5e8:	f6 01       	movw	r30, r12
 5ea:	10 82       	st	Z, r1
	uint8_t newTam = 12+tam;
 5ec:	8c e0       	ldi	r24, 0x0C	; 12
 5ee:	86 0f       	add	r24, r22
	uint8_t* arr;
	
	arr = (uint8_t*)malloc(newTam);
 5f0:	a8 2e       	mov	r10, r24
 5f2:	b1 2c       	mov	r11, r1
 5f4:	c5 01       	movw	r24, r10
 5f6:	69 83       	std	Y+1, r22	; 0x01
 5f8:	0e 94 3c 04 	call	0x878	; 0x878 <malloc>
 5fc:	3c 01       	movw	r6, r24
	memcpy(arr,sendComand,11);
 5fe:	8b e0       	ldi	r24, 0x0B	; 11
 600:	e0 e1       	ldi	r30, 0x10	; 16
 602:	f1 e0       	ldi	r31, 0x01	; 1
 604:	d3 01       	movw	r26, r6
 606:	01 90       	ld	r0, Z+
 608:	0d 92       	st	X+, r0
 60a:	8a 95       	dec	r24
 60c:	e1 f7       	brne	.-8      	; 0x606 <sendData+0x4e>
	arr[1]=newTam-3;//menos el header
 60e:	69 81       	ldd	r22, Y+1	; 0x01
 610:	89 e0       	ldi	r24, 0x09	; 9
 612:	86 0f       	add	r24, r22
 614:	f3 01       	movw	r30, r6
 616:	81 83       	std	Z+1, r24	; 0x01
	arr[11]=tam;//tanaio del payload
 618:	63 87       	std	Z+11, r22	; 0x0b
	memcpy(&arr[12],data,tam);
 61a:	46 2f       	mov	r20, r22
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	b7 01       	movw	r22, r14
 620:	c3 01       	movw	r24, r6
 622:	0c 96       	adiw	r24, 0x0c	; 12
 624:	0e 94 63 05 	call	0xac6	; 0xac6 <memcpy>
	arr[5]=svcId;
 628:	f3 01       	movw	r30, r6
 62a:	95 82       	std	Z+5, r9	; 0x05
	moteData->sizeToSend=(int8_t)hdlc_encode(moteData->hdlcOutput,arr,newTam,sizeof(moteData->hdlcOutput));
 62c:	78 01       	movw	r14, r16
 62e:	f8 e8       	ldi	r31, 0x88	; 136
 630:	ef 0e       	add	r14, r31
 632:	f1 1c       	adc	r15, r1
 634:	20 e8       	ldi	r18, 0x80	; 128
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	a5 01       	movw	r20, r10
 63a:	b3 01       	movw	r22, r6
 63c:	c7 01       	movw	r24, r14
 63e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <hdlc_encode>
 642:	f6 01       	movw	r30, r12
 644:	80 83       	st	Z, r24
	serialMoteSendArray(moteData->hdlcOutput,moteData->sizeToSend,moteData);
 646:	a8 01       	movw	r20, r16
 648:	68 2f       	mov	r22, r24
 64a:	c7 01       	movw	r24, r14
 64c:	0e 94 20 01 	call	0x240	; 0x240 <serialMoteSendArray>
	free(arr);
 650:	c3 01       	movw	r24, r6
 652:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <free>
	while (!moteData->validFrame);
 656:	f8 01       	movw	r30, r16
 658:	e9 57       	subi	r30, 0x79	; 121
 65a:	ff 4f       	sbci	r31, 0xFF	; 255
 65c:	80 81       	ld	r24, Z
 65e:	88 23       	and	r24, r24
 660:	e9 f3       	breq	.-6      	; 0x65c <sendData+0xa4>
	moteData->validFrame=0;
 662:	10 82       	st	Z, r1
	if (compareBuffer(moteData->hdlcDecoded,sendACK,moteData->decodeResult))
 664:	f8 01       	movw	r30, r16
 666:	eb 57       	subi	r30, 0x7B	; 123
 668:	ff 4f       	sbci	r31, 0xFF	; 255
 66a:	40 81       	ld	r20, Z
 66c:	51 81       	ldd	r21, Z+1	; 0x01
 66e:	6c e0       	ldi	r22, 0x0C	; 12
 670:	71 e0       	ldi	r23, 0x01	; 1
 672:	c8 01       	movw	r24, r16
 674:	88 5f       	subi	r24, 0xF8	; 248
 676:	9e 4f       	sbci	r25, 0xFE	; 254
 678:	0e 94 a1 01 	call	0x342	; 0x342 <compareBuffer>
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	81 11       	cpse	r24, r1
 680:	01 c0       	rjmp	.+2      	; 0x684 <sendData+0xcc>
 682:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	
	
}
 684:	89 2f       	mov	r24, r25
 686:	0f 90       	pop	r0
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	ff 90       	pop	r15
 692:	ef 90       	pop	r14
 694:	df 90       	pop	r13
 696:	cf 90       	pop	r12
 698:	bf 90       	pop	r11
 69a:	af 90       	pop	r10
 69c:	9f 90       	pop	r9
 69e:	7f 90       	pop	r7
 6a0:	6f 90       	pop	r6
 6a2:	08 95       	ret

000006a4 <fcs_fcs16>:
 * 
 * @return INT16U - calculated FCS16
 */
INT16U fcs_fcs16(INT16U fcs, INT8U data)
{
   return (fcs >> 8) ^ fcstab[(fcs ^ data) & 0xff];
 6a4:	fc 01       	movw	r30, r24
 6a6:	e6 27       	eor	r30, r22
 6a8:	ff 27       	eor	r31, r31
 6aa:	ee 0f       	add	r30, r30
 6ac:	ff 1f       	adc	r31, r31
 6ae:	e9 57       	subi	r30, 0x79	; 121
 6b0:	fe 4f       	sbci	r31, 0xFE	; 254
 6b2:	89 2f       	mov	r24, r25
 6b4:	99 27       	eor	r25, r25
 6b6:	20 81       	ld	r18, Z
 6b8:	31 81       	ldd	r19, Z+1	; 0x01
}
 6ba:	82 27       	eor	r24, r18
 6bc:	93 27       	eor	r25, r19
 6be:	08 95       	ret

000006c0 <fcs_calcFcs>:
 * @param len - length of buffer
 * 
 * @return INT16U - calculated FCS16
 */
INT16U fcs_calcFcs(INT8U* buf, INT32U len)
{
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	8b 01       	movw	r16, r22
 6ca:	ec 01       	movw	r28, r24
 6cc:	08 0f       	add	r16, r24
 6ce:	19 1f       	adc	r17, r25
   INT16U fcs;
   INT32U i;

   fcs = FCS_INITIAL_FCS16;
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	9f ef       	ldi	r25, 0xFF	; 255
   for (i = 0; i < len; i++) {
 6d4:	c0 17       	cp	r28, r16
 6d6:	d1 07       	cpc	r29, r17
 6d8:	21 f0       	breq	.+8      	; 0x6e2 <fcs_calcFcs+0x22>
      fcs = fcs_fcs16(fcs, buf[i]);
 6da:	69 91       	ld	r22, Y+
 6dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <fcs_fcs16>
 6e0:	f9 cf       	rjmp	.-14     	; 0x6d4 <fcs_calcFcs+0x14>
   }

   return (fcs ^ 0xffff); /* return complement */
}
 6e2:	80 95       	com	r24
 6e4:	90 95       	com	r25
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	08 95       	ret

000006f0 <hdlc_decode>:
 * Returns:
 *    > 0: length of decoded data
 *    < 0: error code
 */
INT32S hdlc_decode(INT8U* pOut, INT8U* pIn, INT8U* inLen, INT32U maxOutLen)
{
 6f0:	7f 92       	push	r7
 6f2:	8f 92       	push	r8
 6f4:	9f 92       	push	r9
 6f6:	af 92       	push	r10
 6f8:	bf 92       	push	r11
 6fa:	cf 92       	push	r12
 6fc:	df 92       	push	r13
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	5c 01       	movw	r10, r24
 70c:	7b 01       	movw	r14, r22
 70e:	6a 01       	movw	r12, r20
 710:	49 01       	movw	r8, r18
   INT8U fOpenFlag = 0;
   INT8U fDataStart = 0;
   INT8U curByte;
   INT8U fEscape = 0;
   
   for (i = 0; i < *inLen; i++) {
 712:	8b 01       	movw	r16, r22
   INT32U wIdx = 0;
   INT16U calcCrc = FCS_INITIAL_FCS16;
   INT8U fOpenFlag = 0;
   INT8U fDataStart = 0;
   INT8U curByte;
   INT8U fEscape = 0;
 714:	70 e0       	ldi	r23, 0x00	; 0
{
   INT32U i;
   INT32U wIdx = 0;
   INT16U calcCrc = FCS_INITIAL_FCS16;
   INT8U fOpenFlag = 0;
   INT8U fDataStart = 0;
 716:	e0 e0       	ldi	r30, 0x00	; 0
INT32S hdlc_decode(INT8U* pOut, INT8U* pIn, INT8U* inLen, INT32U maxOutLen)
{
   INT32U i;
   INT32U wIdx = 0;
   INT16U calcCrc = FCS_INITIAL_FCS16;
   INT8U fOpenFlag = 0;
 718:	60 e0       	ldi	r22, 0x00	; 0
 */
INT32S hdlc_decode(INT8U* pOut, INT8U* pIn, INT8U* inLen, INT32U maxOutLen)
{
   INT32U i;
   INT32U wIdx = 0;
   INT16U calcCrc = FCS_INITIAL_FCS16;
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 *    < 0: error code
 */
INT32S hdlc_decode(INT8U* pOut, INT8U* pIn, INT8U* inLen, INT32U maxOutLen)
{
   INT32U i;
   INT32U wIdx = 0;
 71e:	c0 e0       	ldi	r28, 0x00	; 0
 720:	d0 e0       	ldi	r29, 0x00	; 0
      else {
         if (fOpenFlag) {
            fDataStart = 1;
            if (fEscape) {
               fEscape = 0;
               pOut[wIdx] = (curByte ^ 0x20);
 722:	20 e2       	ldi	r18, 0x20	; 32
 724:	72 2e       	mov	r7, r18
 726:	98 01       	movw	r18, r16
 728:	2e 19       	sub	r18, r14
 72a:	3f 09       	sbc	r19, r15
   INT8U fOpenFlag = 0;
   INT8U fDataStart = 0;
   INT8U curByte;
   INT8U fEscape = 0;
   
   for (i = 0; i < *inLen; i++) {
 72c:	d6 01       	movw	r26, r12
 72e:	4c 91       	ld	r20, X
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	24 17       	cp	r18, r20
 734:	35 07       	cpc	r19, r21
 736:	48 f5       	brcc	.+82     	; 0x78a <hdlc_decode+0x9a>
      curByte = pIn[i];
 738:	d8 01       	movw	r26, r16
 73a:	4d 91       	ld	r20, X+
 73c:	8d 01       	movw	r16, r26
      if (curByte == HDLC_FRAME_BYTE) {
 73e:	4e 37       	cpi	r20, 0x7E	; 126
 740:	69 f4       	brne	.+26     	; 0x75c <hdlc_decode+0x6c>
         if (!fOpenFlag) {
 742:	66 23       	and	r22, r22
 744:	f1 f0       	breq	.+60     	; 0x782 <hdlc_decode+0x92>
            fOpenFlag = 1;
         }
         else if (fDataStart) {
 746:	ee 23       	and	r30, r30
 748:	e1 f0       	breq	.+56     	; 0x782 <hdlc_decode+0x92>
            // output amount of input read
            *inLen = i+1;
 74a:	2f 5f       	subi	r18, 0xFF	; 255
 74c:	f6 01       	movw	r30, r12
 74e:	20 83       	st	Z, r18
            if (calcCrc == FCS_GOOD_FCS16) {
 750:	88 3b       	cpi	r24, 0xB8	; 184
 752:	90 4f       	sbci	r25, 0xF0	; 240
 754:	e9 f4       	brne	.+58     	; 0x790 <hdlc_decode+0xa0>
               // return length excluding CRC bytes
               return (wIdx - 2);
 756:	ce 01       	movw	r24, r28
 758:	02 97       	sbiw	r24, 0x02	; 2
 75a:	1f c0       	rjmp	.+62     	; 0x79a <hdlc_decode+0xaa>
            else {
               return HDLC_ERR_CRC;
            }
         }
      }
      else if (curByte == HDLC_ESCAPE_BYTE) {
 75c:	4d 37       	cpi	r20, 0x7D	; 125
 75e:	99 f0       	breq	.+38     	; 0x786 <hdlc_decode+0x96>
         fEscape = 1;
      }
      else {
         if (fOpenFlag) {
 760:	66 23       	and	r22, r22
 762:	09 f3       	breq	.-62     	; 0x726 <hdlc_decode+0x36>
 764:	f5 01       	movw	r30, r10
 766:	ec 0f       	add	r30, r28
 768:	fd 1f       	adc	r31, r29
            fDataStart = 1;
            if (fEscape) {
 76a:	71 11       	cpse	r23, r1
               fEscape = 0;
               pOut[wIdx] = (curByte ^ 0x20);
 76c:	47 25       	eor	r20, r7
            }
            else {
               pOut[wIdx] = curByte;
 76e:	40 83       	st	Z, r20
            }
            if (wIdx > maxOutLen) {
 770:	8c 16       	cp	r8, r28
 772:	9d 06       	cpc	r9, r29
 774:	80 f0       	brcs	.+32     	; 0x796 <hdlc_decode+0xa6>
               return HDLC_ERR_LEN;
            }
            calcCrc = fcs_fcs16(calcCrc, pOut[wIdx]);
 776:	60 81       	ld	r22, Z
 778:	0e 94 52 03 	call	0x6a4	; 0x6a4 <fcs_fcs16>
            wIdx++;
 77c:	21 96       	adiw	r28, 0x01	; 1
 77e:	70 e0       	ldi	r23, 0x00	; 0
      else if (curByte == HDLC_ESCAPE_BYTE) {
         fEscape = 1;
      }
      else {
         if (fOpenFlag) {
            fDataStart = 1;
 780:	e1 e0       	ldi	r30, 0x01	; 1
 782:	61 e0       	ldi	r22, 0x01	; 1
 784:	d0 cf       	rjmp	.-96     	; 0x726 <hdlc_decode+0x36>
               return HDLC_ERR_CRC;
            }
         }
      }
      else if (curByte == HDLC_ESCAPE_BYTE) {
         fEscape = 1;
 786:	71 e0       	ldi	r23, 0x01	; 1
 788:	ce cf       	rjmp	.-100    	; 0x726 <hdlc_decode+0x36>
            calcCrc = fcs_fcs16(calcCrc, pOut[wIdx]);
            wIdx++;
         }
      }
   }
   return HDLC_ERR_FRAME;
 78a:	8e ef       	ldi	r24, 0xFE	; 254
 78c:	9f ef       	ldi	r25, 0xFF	; 255
 78e:	05 c0       	rjmp	.+10     	; 0x79a <hdlc_decode+0xaa>
            if (calcCrc == FCS_GOOD_FCS16) {
               // return length excluding CRC bytes
               return (wIdx - 2);
            }
            else {
               return HDLC_ERR_CRC;
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	9f ef       	ldi	r25, 0xFF	; 255
 794:	02 c0       	rjmp	.+4      	; 0x79a <hdlc_decode+0xaa>
            }
            else {
               pOut[wIdx] = curByte;
            }
            if (wIdx > maxOutLen) {
               return HDLC_ERR_LEN;
 796:	8d ef       	ldi	r24, 0xFD	; 253
 798:	9f ef       	ldi	r25, 0xFF	; 255
            wIdx++;
         }
      }
   }
   return HDLC_ERR_FRAME;
}
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	df 90       	pop	r13
 7a8:	cf 90       	pop	r12
 7aa:	bf 90       	pop	r11
 7ac:	af 90       	pop	r10
 7ae:	9f 90       	pop	r9
 7b0:	8f 90       	pop	r8
 7b2:	7f 90       	pop	r7
 7b4:	08 95       	ret

000007b6 <hdlc_stuffByte>:
 *    byte:   byte to encode
 * Returns:
 *    Number of bytes written to destination (1 or 2 if escaped) 
 */
INT8U hdlc_stuffByte(INT8U* pDest, INT8U byte)
{
 7b6:	fc 01       	movw	r30, r24
   if (byte == HDLC_FRAME_BYTE || byte == HDLC_ESCAPE_BYTE) {
 7b8:	83 e8       	ldi	r24, 0x83	; 131
 7ba:	86 0f       	add	r24, r22
 7bc:	82 30       	cpi	r24, 0x02	; 2
 7be:	38 f4       	brcc	.+14     	; 0x7ce <hdlc_stuffByte+0x18>
      *pDest = HDLC_ESCAPE_BYTE;
 7c0:	8d e7       	ldi	r24, 0x7D	; 125
 7c2:	80 83       	st	Z, r24
      *(pDest+1) = byte ^ 0x20;
 7c4:	80 e2       	ldi	r24, 0x20	; 32
 7c6:	86 27       	eor	r24, r22
 7c8:	81 83       	std	Z+1, r24	; 0x01
      return 2;
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	08 95       	ret
   }
   else {
      *pDest = byte;
 7ce:	60 83       	st	Z, r22
      return 1;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
   }
}
 7d2:	08 95       	ret

000007d4 <hdlc_encode>:
 *    maxOutLen: Max output length  
 * Returns:
 *    Number of bytes written to destination 
 */
INT32S hdlc_encode(INT8U* pOut, INT8U* pIn, INT32U inLen, INT32U maxOutLen)
{
 7d4:	8f 92       	push	r8
 7d6:	9f 92       	push	r9
 7d8:	af 92       	push	r10
 7da:	bf 92       	push	r11
 7dc:	cf 92       	push	r12
 7de:	df 92       	push	r13
 7e0:	ef 92       	push	r14
 7e2:	ff 92       	push	r15
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	7c 01       	movw	r14, r24
 7ee:	5b 01       	movw	r10, r22
 7f0:	8a 01       	movw	r16, r20
 7f2:	69 01       	movw	r12, r18
   INT16U wIdx = 0;
   INT16U txFcs = 0;
   INT8U fcsHi, fcsLo;

   // calculate the FCS
   txFcs = fcs_calcFcs(pIn, inLen);
 7f4:	ba 01       	movw	r22, r20
 7f6:	c5 01       	movw	r24, r10
 7f8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <fcs_calcFcs>
 7fc:	4c 01       	movw	r8, r24

   // stuff input into output buffer, escaping framing characters in input
   pOut[wIdx++] = HDLC_FRAME_BYTE;
 7fe:	8e e7       	ldi	r24, 0x7E	; 126
 800:	f7 01       	movw	r30, r14
 802:	80 83       	st	Z, r24
 804:	e5 01       	movw	r28, r10
 806:	a0 0e       	add	r10, r16
 808:	b1 1e       	adc	r11, r17
 80a:	01 e0       	ldi	r16, 0x01	; 1
 80c:	10 e0       	ldi	r17, 0x00	; 0
   for (i = 0; i < inLen; i++) {
      wIdx += hdlc_stuffByte(&pOut[wIdx], pIn[i]);
      if (wIdx > (maxOutLen - 4)) {
 80e:	f4 e0       	ldi	r31, 0x04	; 4
 810:	cf 1a       	sub	r12, r31
 812:	d1 08       	sbc	r13, r1
 814:	c7 01       	movw	r24, r14
 816:	80 0f       	add	r24, r16
 818:	91 1f       	adc	r25, r17
   // calculate the FCS
   txFcs = fcs_calcFcs(pIn, inLen);

   // stuff input into output buffer, escaping framing characters in input
   pOut[wIdx++] = HDLC_FRAME_BYTE;
   for (i = 0; i < inLen; i++) {
 81a:	ca 15       	cp	r28, r10
 81c:	db 05       	cpc	r29, r11
 81e:	59 f0       	breq	.+22     	; 0x836 <hdlc_encode+0x62>
      wIdx += hdlc_stuffByte(&pOut[wIdx], pIn[i]);
 820:	69 91       	ld	r22, Y+
 822:	0e 94 db 03 	call	0x7b6	; 0x7b6 <hdlc_stuffByte>
 826:	08 0f       	add	r16, r24
 828:	11 1d       	adc	r17, r1
      if (wIdx > (maxOutLen - 4)) {
 82a:	c0 16       	cp	r12, r16
 82c:	d1 06       	cpc	r13, r17
 82e:	90 f7       	brcc	.-28     	; 0x814 <hdlc_encode+0x40>
         return HDLC_ERR_LEN; 
 830:	8d ef       	ldi	r24, 0xFD	; 253
 832:	9f ef       	ldi	r25, 0xFF	; 255
 834:	14 c0       	rjmp	.+40     	; 0x85e <hdlc_encode+0x8a>
   }
   
   // append CRC
   fcsHi = (txFcs & 0xFF);
   fcsLo = ((txFcs >> 8) & 0xFF);
   wIdx += hdlc_stuffByte(&pOut[wIdx], fcsHi);
 836:	68 2d       	mov	r22, r8
 838:	0e 94 db 03 	call	0x7b6	; 0x7b6 <hdlc_stuffByte>
 83c:	08 0f       	add	r16, r24
 83e:	11 1d       	adc	r17, r1
   wIdx += hdlc_stuffByte(&pOut[wIdx], fcsLo);
 840:	69 2d       	mov	r22, r9
 842:	c7 01       	movw	r24, r14
 844:	80 0f       	add	r24, r16
 846:	91 1f       	adc	r25, r17
 848:	0e 94 db 03 	call	0x7b6	; 0x7b6 <hdlc_stuffByte>
 84c:	08 0f       	add	r16, r24
 84e:	11 1d       	adc	r17, r1
   pOut[wIdx++] = HDLC_FRAME_BYTE;
 850:	f7 01       	movw	r30, r14
 852:	e0 0f       	add	r30, r16
 854:	f1 1f       	adc	r31, r17
 856:	8e e7       	ldi	r24, 0x7E	; 126
 858:	80 83       	st	Z, r24
 85a:	c8 01       	movw	r24, r16
 85c:	01 96       	adiw	r24, 0x01	; 1
   return wIdx;
}
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	ff 90       	pop	r15
 868:	ef 90       	pop	r14
 86a:	df 90       	pop	r13
 86c:	cf 90       	pop	r12
 86e:	bf 90       	pop	r11
 870:	af 90       	pop	r10
 872:	9f 90       	pop	r9
 874:	8f 90       	pop	r8
 876:	08 95       	ret

00000878 <malloc>:
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	82 30       	cpi	r24, 0x02	; 2
 87e:	91 05       	cpc	r25, r1
 880:	10 f4       	brcc	.+4      	; 0x886 <malloc+0xe>
 882:	82 e0       	ldi	r24, 0x02	; 2
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	e0 91 13 05 	lds	r30, 0x0513
 88a:	f0 91 14 05 	lds	r31, 0x0514
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	a0 e0       	ldi	r26, 0x00	; 0
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	30 97       	sbiw	r30, 0x00	; 0
 898:	39 f1       	breq	.+78     	; 0x8e8 <malloc+0x70>
 89a:	40 81       	ld	r20, Z
 89c:	51 81       	ldd	r21, Z+1	; 0x01
 89e:	48 17       	cp	r20, r24
 8a0:	59 07       	cpc	r21, r25
 8a2:	b8 f0       	brcs	.+46     	; 0x8d2 <malloc+0x5a>
 8a4:	48 17       	cp	r20, r24
 8a6:	59 07       	cpc	r21, r25
 8a8:	71 f4       	brne	.+28     	; 0x8c6 <malloc+0x4e>
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	10 97       	sbiw	r26, 0x00	; 0
 8b0:	29 f0       	breq	.+10     	; 0x8bc <malloc+0x44>
 8b2:	13 96       	adiw	r26, 0x03	; 3
 8b4:	9c 93       	st	X, r25
 8b6:	8e 93       	st	-X, r24
 8b8:	12 97       	sbiw	r26, 0x02	; 2
 8ba:	2c c0       	rjmp	.+88     	; 0x914 <__stack+0x15>
 8bc:	90 93 14 05 	sts	0x0514, r25
 8c0:	80 93 13 05 	sts	0x0513, r24
 8c4:	27 c0       	rjmp	.+78     	; 0x914 <__stack+0x15>
 8c6:	21 15       	cp	r18, r1
 8c8:	31 05       	cpc	r19, r1
 8ca:	31 f0       	breq	.+12     	; 0x8d8 <malloc+0x60>
 8cc:	42 17       	cp	r20, r18
 8ce:	53 07       	cpc	r21, r19
 8d0:	18 f0       	brcs	.+6      	; 0x8d8 <malloc+0x60>
 8d2:	a9 01       	movw	r20, r18
 8d4:	db 01       	movw	r26, r22
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <malloc+0x62>
 8d8:	ef 01       	movw	r28, r30
 8da:	9a 01       	movw	r18, r20
 8dc:	bd 01       	movw	r22, r26
 8de:	df 01       	movw	r26, r30
 8e0:	02 80       	ldd	r0, Z+2	; 0x02
 8e2:	f3 81       	ldd	r31, Z+3	; 0x03
 8e4:	e0 2d       	mov	r30, r0
 8e6:	d7 cf       	rjmp	.-82     	; 0x896 <malloc+0x1e>
 8e8:	21 15       	cp	r18, r1
 8ea:	31 05       	cpc	r19, r1
 8ec:	f9 f0       	breq	.+62     	; 0x92c <__stack+0x2d>
 8ee:	28 1b       	sub	r18, r24
 8f0:	39 0b       	sbc	r19, r25
 8f2:	24 30       	cpi	r18, 0x04	; 4
 8f4:	31 05       	cpc	r19, r1
 8f6:	80 f4       	brcc	.+32     	; 0x918 <__stack+0x19>
 8f8:	8a 81       	ldd	r24, Y+2	; 0x02
 8fa:	9b 81       	ldd	r25, Y+3	; 0x03
 8fc:	61 15       	cp	r22, r1
 8fe:	71 05       	cpc	r23, r1
 900:	21 f0       	breq	.+8      	; 0x90a <__stack+0xb>
 902:	fb 01       	movw	r30, r22
 904:	93 83       	std	Z+3, r25	; 0x03
 906:	82 83       	std	Z+2, r24	; 0x02
 908:	04 c0       	rjmp	.+8      	; 0x912 <__stack+0x13>
 90a:	90 93 14 05 	sts	0x0514, r25
 90e:	80 93 13 05 	sts	0x0513, r24
 912:	fe 01       	movw	r30, r28
 914:	32 96       	adiw	r30, 0x02	; 2
 916:	44 c0       	rjmp	.+136    	; 0x9a0 <__stack+0xa1>
 918:	fe 01       	movw	r30, r28
 91a:	e2 0f       	add	r30, r18
 91c:	f3 1f       	adc	r31, r19
 91e:	81 93       	st	Z+, r24
 920:	91 93       	st	Z+, r25
 922:	22 50       	subi	r18, 0x02	; 2
 924:	31 09       	sbc	r19, r1
 926:	39 83       	std	Y+1, r19	; 0x01
 928:	28 83       	st	Y, r18
 92a:	3a c0       	rjmp	.+116    	; 0x9a0 <__stack+0xa1>
 92c:	20 91 11 05 	lds	r18, 0x0511
 930:	30 91 12 05 	lds	r19, 0x0512
 934:	23 2b       	or	r18, r19
 936:	41 f4       	brne	.+16     	; 0x948 <__stack+0x49>
 938:	20 91 02 01 	lds	r18, 0x0102
 93c:	30 91 03 01 	lds	r19, 0x0103
 940:	30 93 12 05 	sts	0x0512, r19
 944:	20 93 11 05 	sts	0x0511, r18
 948:	20 91 00 01 	lds	r18, 0x0100
 94c:	30 91 01 01 	lds	r19, 0x0101
 950:	21 15       	cp	r18, r1
 952:	31 05       	cpc	r19, r1
 954:	41 f4       	brne	.+16     	; 0x966 <__stack+0x67>
 956:	2d b7       	in	r18, 0x3d	; 61
 958:	3e b7       	in	r19, 0x3e	; 62
 95a:	40 91 04 01 	lds	r20, 0x0104
 95e:	50 91 05 01 	lds	r21, 0x0105
 962:	24 1b       	sub	r18, r20
 964:	35 0b       	sbc	r19, r21
 966:	e0 91 11 05 	lds	r30, 0x0511
 96a:	f0 91 12 05 	lds	r31, 0x0512
 96e:	e2 17       	cp	r30, r18
 970:	f3 07       	cpc	r31, r19
 972:	a0 f4       	brcc	.+40     	; 0x99c <__stack+0x9d>
 974:	2e 1b       	sub	r18, r30
 976:	3f 0b       	sbc	r19, r31
 978:	28 17       	cp	r18, r24
 97a:	39 07       	cpc	r19, r25
 97c:	78 f0       	brcs	.+30     	; 0x99c <__stack+0x9d>
 97e:	ac 01       	movw	r20, r24
 980:	4e 5f       	subi	r20, 0xFE	; 254
 982:	5f 4f       	sbci	r21, 0xFF	; 255
 984:	24 17       	cp	r18, r20
 986:	35 07       	cpc	r19, r21
 988:	48 f0       	brcs	.+18     	; 0x99c <__stack+0x9d>
 98a:	4e 0f       	add	r20, r30
 98c:	5f 1f       	adc	r21, r31
 98e:	50 93 12 05 	sts	0x0512, r21
 992:	40 93 11 05 	sts	0x0511, r20
 996:	81 93       	st	Z+, r24
 998:	91 93       	st	Z+, r25
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
 99c:	e0 e0       	ldi	r30, 0x00	; 0
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	cf 01       	movw	r24, r30
 9a2:	df 91       	pop	r29
 9a4:	cf 91       	pop	r28
 9a6:	08 95       	ret

000009a8 <free>:
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	00 97       	sbiw	r24, 0x00	; 0
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <free+0xa>
 9b0:	87 c0       	rjmp	.+270    	; 0xac0 <free+0x118>
 9b2:	fc 01       	movw	r30, r24
 9b4:	32 97       	sbiw	r30, 0x02	; 2
 9b6:	13 82       	std	Z+3, r1	; 0x03
 9b8:	12 82       	std	Z+2, r1	; 0x02
 9ba:	c0 91 13 05 	lds	r28, 0x0513
 9be:	d0 91 14 05 	lds	r29, 0x0514
 9c2:	20 97       	sbiw	r28, 0x00	; 0
 9c4:	81 f4       	brne	.+32     	; 0x9e6 <free+0x3e>
 9c6:	20 81       	ld	r18, Z
 9c8:	31 81       	ldd	r19, Z+1	; 0x01
 9ca:	28 0f       	add	r18, r24
 9cc:	39 1f       	adc	r19, r25
 9ce:	80 91 11 05 	lds	r24, 0x0511
 9d2:	90 91 12 05 	lds	r25, 0x0512
 9d6:	82 17       	cp	r24, r18
 9d8:	93 07       	cpc	r25, r19
 9da:	79 f5       	brne	.+94     	; 0xa3a <free+0x92>
 9dc:	f0 93 12 05 	sts	0x0512, r31
 9e0:	e0 93 11 05 	sts	0x0511, r30
 9e4:	6d c0       	rjmp	.+218    	; 0xac0 <free+0x118>
 9e6:	de 01       	movw	r26, r28
 9e8:	20 e0       	ldi	r18, 0x00	; 0
 9ea:	30 e0       	ldi	r19, 0x00	; 0
 9ec:	ae 17       	cp	r26, r30
 9ee:	bf 07       	cpc	r27, r31
 9f0:	50 f4       	brcc	.+20     	; 0xa06 <free+0x5e>
 9f2:	12 96       	adiw	r26, 0x02	; 2
 9f4:	4d 91       	ld	r20, X+
 9f6:	5c 91       	ld	r21, X
 9f8:	13 97       	sbiw	r26, 0x03	; 3
 9fa:	9d 01       	movw	r18, r26
 9fc:	41 15       	cp	r20, r1
 9fe:	51 05       	cpc	r21, r1
 a00:	09 f1       	breq	.+66     	; 0xa44 <free+0x9c>
 a02:	da 01       	movw	r26, r20
 a04:	f3 cf       	rjmp	.-26     	; 0x9ec <free+0x44>
 a06:	b3 83       	std	Z+3, r27	; 0x03
 a08:	a2 83       	std	Z+2, r26	; 0x02
 a0a:	40 81       	ld	r20, Z
 a0c:	51 81       	ldd	r21, Z+1	; 0x01
 a0e:	84 0f       	add	r24, r20
 a10:	95 1f       	adc	r25, r21
 a12:	8a 17       	cp	r24, r26
 a14:	9b 07       	cpc	r25, r27
 a16:	71 f4       	brne	.+28     	; 0xa34 <free+0x8c>
 a18:	8d 91       	ld	r24, X+
 a1a:	9c 91       	ld	r25, X
 a1c:	11 97       	sbiw	r26, 0x01	; 1
 a1e:	84 0f       	add	r24, r20
 a20:	95 1f       	adc	r25, r21
 a22:	02 96       	adiw	r24, 0x02	; 2
 a24:	91 83       	std	Z+1, r25	; 0x01
 a26:	80 83       	st	Z, r24
 a28:	12 96       	adiw	r26, 0x02	; 2
 a2a:	8d 91       	ld	r24, X+
 a2c:	9c 91       	ld	r25, X
 a2e:	13 97       	sbiw	r26, 0x03	; 3
 a30:	93 83       	std	Z+3, r25	; 0x03
 a32:	82 83       	std	Z+2, r24	; 0x02
 a34:	21 15       	cp	r18, r1
 a36:	31 05       	cpc	r19, r1
 a38:	29 f4       	brne	.+10     	; 0xa44 <free+0x9c>
 a3a:	f0 93 14 05 	sts	0x0514, r31
 a3e:	e0 93 13 05 	sts	0x0513, r30
 a42:	3e c0       	rjmp	.+124    	; 0xac0 <free+0x118>
 a44:	d9 01       	movw	r26, r18
 a46:	13 96       	adiw	r26, 0x03	; 3
 a48:	fc 93       	st	X, r31
 a4a:	ee 93       	st	-X, r30
 a4c:	12 97       	sbiw	r26, 0x02	; 2
 a4e:	4d 91       	ld	r20, X+
 a50:	5d 91       	ld	r21, X+
 a52:	a4 0f       	add	r26, r20
 a54:	b5 1f       	adc	r27, r21
 a56:	ea 17       	cp	r30, r26
 a58:	fb 07       	cpc	r31, r27
 a5a:	79 f4       	brne	.+30     	; 0xa7a <free+0xd2>
 a5c:	80 81       	ld	r24, Z
 a5e:	91 81       	ldd	r25, Z+1	; 0x01
 a60:	84 0f       	add	r24, r20
 a62:	95 1f       	adc	r25, r21
 a64:	02 96       	adiw	r24, 0x02	; 2
 a66:	d9 01       	movw	r26, r18
 a68:	11 96       	adiw	r26, 0x01	; 1
 a6a:	9c 93       	st	X, r25
 a6c:	8e 93       	st	-X, r24
 a6e:	82 81       	ldd	r24, Z+2	; 0x02
 a70:	93 81       	ldd	r25, Z+3	; 0x03
 a72:	13 96       	adiw	r26, 0x03	; 3
 a74:	9c 93       	st	X, r25
 a76:	8e 93       	st	-X, r24
 a78:	12 97       	sbiw	r26, 0x02	; 2
 a7a:	e0 e0       	ldi	r30, 0x00	; 0
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	8a 81       	ldd	r24, Y+2	; 0x02
 a80:	9b 81       	ldd	r25, Y+3	; 0x03
 a82:	00 97       	sbiw	r24, 0x00	; 0
 a84:	19 f0       	breq	.+6      	; 0xa8c <free+0xe4>
 a86:	fe 01       	movw	r30, r28
 a88:	ec 01       	movw	r28, r24
 a8a:	f9 cf       	rjmp	.-14     	; 0xa7e <free+0xd6>
 a8c:	ce 01       	movw	r24, r28
 a8e:	02 96       	adiw	r24, 0x02	; 2
 a90:	28 81       	ld	r18, Y
 a92:	39 81       	ldd	r19, Y+1	; 0x01
 a94:	82 0f       	add	r24, r18
 a96:	93 1f       	adc	r25, r19
 a98:	20 91 11 05 	lds	r18, 0x0511
 a9c:	30 91 12 05 	lds	r19, 0x0512
 aa0:	28 17       	cp	r18, r24
 aa2:	39 07       	cpc	r19, r25
 aa4:	69 f4       	brne	.+26     	; 0xac0 <free+0x118>
 aa6:	30 97       	sbiw	r30, 0x00	; 0
 aa8:	29 f4       	brne	.+10     	; 0xab4 <free+0x10c>
 aaa:	10 92 14 05 	sts	0x0514, r1
 aae:	10 92 13 05 	sts	0x0513, r1
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <free+0x110>
 ab4:	13 82       	std	Z+3, r1	; 0x03
 ab6:	12 82       	std	Z+2, r1	; 0x02
 ab8:	d0 93 12 05 	sts	0x0512, r29
 abc:	c0 93 11 05 	sts	0x0511, r28
 ac0:	df 91       	pop	r29
 ac2:	cf 91       	pop	r28
 ac4:	08 95       	ret

00000ac6 <memcpy>:
 ac6:	fb 01       	movw	r30, r22
 ac8:	dc 01       	movw	r26, r24
 aca:	02 c0       	rjmp	.+4      	; 0xad0 <memcpy+0xa>
 acc:	01 90       	ld	r0, Z+
 ace:	0d 92       	st	X+, r0
 ad0:	41 50       	subi	r20, 0x01	; 1
 ad2:	50 40       	sbci	r21, 0x00	; 0
 ad4:	d8 f7       	brcc	.-10     	; 0xacc <memcpy+0x6>
 ad6:	08 95       	ret

00000ad8 <_exit>:
 ad8:	f8 94       	cli

00000ada <__stop_program>:
 ada:	ff cf       	rjmp	.-2      	; 0xada <__stop_program>
